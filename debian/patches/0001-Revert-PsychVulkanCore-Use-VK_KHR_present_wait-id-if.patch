From e51c83011c135528bf3a486629399edf8e9a4684 Mon Sep 17 00:00:00 2001
From: Yaroslav Halchenko <debian@onerussian.com>
Date: Tue, 14 Dec 2021 10:49:09 -0500
Subject: [PATCH] Revert "PsychVulkanCore: Use VK_KHR_present_wait/id if
 supported."

This reverts commit 6cd1dae14303a43c0a420f5b37acb4ddda63e03f.
---
 .../Common/PsychVulkanCore/PsychVulkan.c      | 88 +++----------------
 PsychSourceGL/Source/windowsmakeit64_twisty.m |  8 +-
 2 files changed, 15 insertions(+), 81 deletions(-)

diff --git a/PsychSourceGL/Source/Common/PsychVulkanCore/PsychVulkan.c b/PsychSourceGL/Source/Common/PsychVulkanCore/PsychVulkan.c
index 7f02932c1..321f3c0ee 100644
--- a/PsychSourceGL/Source/Common/PsychVulkanCore/PsychVulkan.c
+++ b/PsychSourceGL/Source/Common/PsychVulkanCore/PsychVulkan.c
@@ -100,7 +100,6 @@ typedef struct PsychVulkanDevice {
     psych_bool                          hasHDR;
     psych_bool                          hasHDRLocalDimming;
     psych_bool                          hasTiming;
-    psych_bool                          hasWait;
     uint32_t                            graphicsQueueFamilyIndex;
     VkPhysicalDeviceMemoryProperties    memoryProperties;
 } PsychVulkanDevice;
@@ -246,7 +245,6 @@ PFN_vkAcquireNextImageKHR fpAcquireNextImageKHR;
 PFN_vkQueuePresentKHR fpQueuePresentKHR;
 PFN_vkGetRefreshCycleDurationGOOGLE fpGetRefreshCycleDurationGOOGLE = NULL;
 PFN_vkGetPastPresentationTimingGOOGLE fpGetPastPresentationTimingGOOGLE = NULL;
-PFN_vkWaitForPresentKHR fpWaitForPresentKHR = NULL;
 PFN_vkSetHdrMetadataEXT fpSetHdrMetadataEXT = NULL;
 PFN_vkSetLocalDimmingAMD fpSetLocalDimmingAMD = NULL;
 
@@ -413,7 +411,7 @@ static psych_bool addDeviceExtension(VkExtensionProperties* exts, unsigned int e
     return (FALSE);
 }
 
-psych_bool checkAndRequestDeviceExtensions(VkPhysicalDevice* gpus, int gpuIndex, psych_bool* hasHDR, psych_bool* hasHDRLocalDimming, psych_bool* hasTiming, psych_bool* hasWait)
+psych_bool checkAndRequestDeviceExtensions(VkPhysicalDevice* gpus, int gpuIndex, psych_bool* hasHDR, psych_bool* hasHDRLocalDimming, psych_bool* hasTiming)
 {
     VkResult result;
     psych_bool rc = FALSE;
@@ -489,11 +487,6 @@ psych_bool checkAndRequestDeviceExtensions(VkPhysicalDevice* gpus, int gpuIndex,
         *hasTiming = addDeviceExtension(deviceExtensions, deviceExtensionsCount, VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME);
     }
 
-    if (hasWait) {
-        *hasWait = addDeviceExtension(deviceExtensions, deviceExtensionsCount, VK_KHR_PRESENT_WAIT_EXTENSION_NAME);
-        *hasWait &= addDeviceExtension(deviceExtensions, deviceExtensionsCount, VK_KHR_PRESENT_ID_EXTENSION_NAME);
-    }
-
     // Success: Fall through to cleanup with success return code:
     rc = TRUE;
 
@@ -718,7 +711,7 @@ void PsychVulkanCheckInit(psych_bool dontfail)
             verbosity = (pass == 0) ? 1 : oldVerbosity;
 
             for (i = 0; i < probedCount; i++) {
-                psych_bool hasHDR, hasHDRLocalDimming, hasTiming, hasWait;
+                psych_bool hasHDR, hasHDRLocalDimming, hasTiming;
 
                 // Get physical device properties:
                 // Note: These daisy-chained structs might be useful in the future:
@@ -801,7 +794,7 @@ void PsychVulkanCheckInit(psych_bool dontfail)
                 // Check if minimum set of required device extensions is available on this gpu. This will also check if
                 // HDR extensions and timing extensions are available, report back in hasHDR and hasTiming if they are
                 // supported, and enable/request them if they are supported:
-                if (!checkAndRequestDeviceExtensions(physicalDevices, i, &hasHDR, &hasHDRLocalDimming, &hasTiming, &hasWait))
+                if (!checkAndRequestDeviceExtensions(physicalDevices, i, &hasHDR, &hasHDRLocalDimming, &hasTiming))
                     continue;
 
                 if (needHDR && !hasHDR) {
@@ -886,10 +879,6 @@ void PsychVulkanCheckInit(psych_bool dontfail)
                     GET_INSTANCE_PROC_ADDR(vulkanInstance, GetPastPresentationTimingGOOGLE);
                 }
 
-                // Ability to wait for present completion via VK_KHR_present_wait extension:
-                if (hasWait && !fpWaitForPresentKHR)
-                    GET_INSTANCE_PROC_ADDR(vulkanInstance, WaitForPresentKHR);
-
                 // Add a record about this GPU's basic properties:
                 vulkan = &(vulkanDevices[physicalGpuCount]);
                 vulkan->deviceIndex = physicalGpuCount + 1;
@@ -900,7 +889,6 @@ void PsychVulkanCheckInit(psych_bool dontfail)
                 vulkan->hasHDR = hasHDR;
                 vulkan->hasHDRLocalDimming = hasHDRLocalDimming;
                 vulkan->hasTiming = hasTiming;
-                vulkan->hasWait = hasWait;
                 vulkan->graphicsQueueFamilyIndex = graphicsQueueFamilyIndex;
 
                 // Create logical vulkan device -- the "gpu" for our physical device:
@@ -915,21 +903,9 @@ void PsychVulkanCheckInit(psych_bool dontfail)
                         .flags = 0,
                     };
 
-                    VkPhysicalDevicePresentIdFeaturesKHR presentIdFeatureEnable = {
-                        .sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR,
-                        .pNext = NULL,
-                        .presentId = VK_TRUE,
-                    };
-
-                    VkPhysicalDevicePresentWaitFeaturesKHR waitFeatureEnable = {
-                        .sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR,
-                        .pNext = &presentIdFeatureEnable,
-                        .presentWait = VK_TRUE,
-                    };
-
                     VkDeviceCreateInfo deviceCreateInfo = {
                         .sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
-                        .pNext = (hasWait) ? &waitFeatureEnable : NULL,             // TODO: Add support for VK_EXT_global_priority ?
+                        .pNext = NULL,                                              // TODO: Add support for VK_EXT_global_priority ?
                         .queueCreateInfoCount = 1,
                         .pQueueCreateInfos = &queueCreateInfo,
                         .enabledLayerCount = (verbosity > 10) ? 1 : 0,              // Deprecated since v1.1, ignored.
@@ -2068,7 +2044,7 @@ psych_bool PsychIsVulkanGPUSuitable(PsychVulkanWindow* window, PsychVulkanDevice
 
     // If we need precise timing, and the device does support timing, we are good.
     // Otherwise we'll need to use our hacks which require strict double-buffering.
-    if (needsTiming && !vulkan->hasTiming && !vulkan->hasWait) {
+    if (needsTiming && !vulkan->hasTiming) {
         // Our hacks are needed, and therefore strict double-buffering support by
         // the driver + gpu device combo.
 
@@ -2161,8 +2137,8 @@ psych_bool PsychIsVulkanGPUSuitable(PsychVulkanWindow* window, PsychVulkanDevice
 
     if (needsTiming) {
         // We either need the ability to have strictly double-buffered swapchains, or we need precise timing support by the
-        // driver, ie. support for the VK_GOOGLE_DISPLAY_TIMING_EXTENSION, or at least wait-for-present-completion support:
-        if (!vulkan->hasTiming && !vulkan->hasWait && (window->surfaceCapabilities.minImageCount > 2)) {
+        // driver, ie. support for the VK_GOOGLE_DISPLAY_TIMING_EXTENSION:
+        if (!vulkan->hasTiming && (window->surfaceCapabilities.minImageCount > 2)) {
             // No dice.
             if (verbosity > 4) {
                 printf("PsychVulkanCore-INFO: Vulkan gpu '%s' does not support required visual onset timing precision in the %s configuration required by window %i.\n", vulkan->deviceProps.deviceName, isFullscreen ? "fullscreen" : "windowed", window->index);
@@ -2485,7 +2461,6 @@ psych_bool PsychPresent(PsychVulkanWindow* window, double tWhen, unsigned int ti
     VkResult result;
     VkPresentTimeGOOGLE targetPresentTimeG;
     PsychVulkanDevice* vulkan = window->vulkan;
-    uint64_t targetPresentId;
 
     // Mark presentation timestamp as so far "invalid"/"unknown":
     window->tPresentComplete = -1;
@@ -2541,24 +2516,6 @@ psych_bool PsychPresent(PsychVulkanWindow* window, double tWhen, unsigned int ti
         .pResults = NULL, // swapchainCount separate VkResult's if presenting to multiple chains.
     };
 
-    // VK_KHR_PRESENT_ID supported?
-    if (vulkan->hasWait && (timestampMode > 0)) {
-        // Assign present id - the current frameIndex:
-        VkPresentIdKHR presentIdInfo = {
-            .sType = VK_STRUCTURE_TYPE_PRESENT_ID_KHR,
-            .pNext = present.pNext,
-            .swapchainCount = 1,
-            .pPresentIds = &targetPresentId,
-        };
-
-        // targetPresentId must start with 1 for 1st queued present, hence the frameIndex + 1:
-        targetPresentId = window->frameIndex + 1;
-        present.pNext = &presentIdInfo;
-
-        if (verbosity > 7)
-            printf("PsychVulkanCore-DEBUG: PsychPresent(%i): Assigning frame %i with VkPresentIdKHR presentID %lli.\n", window->index, window->frameIndex, targetPresentId);
-    }
-
     // VK_GOOGLE_DISPLAY_TIMING supported?
     if (vulkan->hasTiming && (timestampMode > 1)) {
         // Yes: Queue a target time for the present:
@@ -2644,24 +2601,6 @@ psych_bool PsychPresent(PsychVulkanWindow* window, double tWhen, unsigned int ti
 
     // Should we timestamp (imminent) stimulus onset?
     if (timestampMode > 0) {
-        // Wait for present completion supported?
-        if (vulkan->hasWait) {
-            // Blocking wait with timeout of 1 second for present completion of the just-queued present:
-            result = fpWaitForPresentKHR(vulkan->device, window->swapChain, targetPresentId, 1e9);
-            if ((result != VK_SUCCESS) && (verbosity > 0)) {
-                if (result == VK_TIMEOUT) {
-                    printf("PsychVulkanCore-ERROR: vkWaitForPresentKHR(%i): Failed due to timeout!\n", window->index);
-                } else {
-                    printf("PsychVulkanCore-ERROR: vkWaitForPresentKHR(%i): Failed with error code %i.\n", window->index, result);
-                }
-            }
-            else if (verbosity > 8) {
-                double tNow;
-                PsychGetAdjustedPrecisionTimerSeconds(&tNow);
-                printf("PsychVulkanCore-DEBUG: PsychPresent(%i): Frame %i with presentID %lli signalled by vkWaitForPresentKHR as complete at %f seconds.\n", window->index, window->frameIndex - 1, targetPresentId, tNow);
-            }
-        }
-
         // VK_GOOGLE_DISPLAY_TIMING supported for timestamping?
         if (vulkan->hasTiming && (timestampMode > 1)) {
             // Yes. Fetch timestamp from Vulkan:
@@ -2670,10 +2609,8 @@ psych_bool PsychPresent(PsychVulkanWindow* window, double tWhen, unsigned int ti
             double tNow, tStart;
             uint32_t count = 0;
 
-            // Wait until target present time is reached - No point checking before.
-            // Not needed if we used wait for present complete:
-            if (!vulkan->hasWait)
-                PsychWaitUntilSeconds(tWhen);
+            // Wait until target present time is reached - No point checking before:
+            PsychWaitUntilSeconds(tWhen);
 
             // Poll for arrival of present completion timestamp:
             PsychGetAdjustedPrecisionTimerSeconds(&tNow);
@@ -4110,16 +4047,14 @@ PsychError PSYCHVULKANGetDevices(void)
     "'SupportsTiming' = Does the gpu support high precision/reliability timing\n"
     "                   extensions. 0 = No, 1 = Yes. If the driver does not support\n"
     "                   timing extensions, the driver will fall back to hacks.\n"
-    "'SupportsWait' = Does the gpu support waiting for present completion: 0 = No, 1 = Yes.\n"
     "\n";
     static char seeAlsoString[] = "GetCount";
 
     int i;
     char tmp[64];
     PsychGenericScriptType *s;
-    const char *fieldNames[] = { "DeviceIndex", "GpuName", "GpuDriver", "DriverInfo", "DriverVersion", "DriverVersionRaw", "DriverId", "VendorId", "DeviceId", "VulkanVersion", "GpuType",
-                                 "SupportsHDR", "SupportsTiming", "SupportsWait" };
-    const int fieldCount = 14;
+    const char *fieldNames[] = { "DeviceIndex", "GpuName", "GpuDriver", "DriverInfo", "DriverVersion", "DriverVersionRaw", "DriverId", "VendorId", "DeviceId", "VulkanVersion", "GpuType", "SupportsHDR", "SupportsTiming" };
+    const int fieldCount = 13;
 
     // All sub functions should have these two lines:
     PsychPushHelp(useString, synopsisString, seeAlsoString);
@@ -4151,7 +4086,6 @@ PsychError PSYCHVULKANGetDevices(void)
         PsychSetStructArrayDoubleElement("GpuType", i, vulkan->deviceProps.deviceType, s);
         PsychSetStructArrayDoubleElement("SupportsHDR", i, vulkan->hasHDR, s);
         PsychSetStructArrayDoubleElement("SupportsTiming", i, vulkan->hasTiming, s);
-        PsychSetStructArrayDoubleElement("SupportsWait", i, vulkan->hasWait, s);
     }
 
     return(PsychError_none);
diff --git a/PsychSourceGL/Source/windowsmakeit64_twisty.m b/PsychSourceGL/Source/windowsmakeit64_twisty.m
index 4da2be2b9..be509ad89 100644
--- a/PsychSourceGL/Source/windowsmakeit64_twisty.m
+++ b/PsychSourceGL/Source/windowsmakeit64_twisty.m
@@ -232,8 +232,8 @@ if onoctave == 0
     if what == 15
         % Build PsychVulkanCore for 64-Bit Matlab:
         % Needs the official Vulkan SDK for 64-Bit Windows for at least
-        % Vulkan 1.1 installed under C:\VulkanSDK\1.2.189.2
-        mex -outdir ..\Projects\Windows\build -output PsychVulkanCore -DPTBMODULE_PsychVulkanCore -largeArrayDims -DMEX_DOUBLE_HANDLE -L"C:\VulkanSDK\1.2.189.2\Lib" -I"C:\VulkanSDK\1.2.189.2\Include" -ICommon\Base -IWindows\Base -ICommon\PsychVulkanCore Windows\Base\*.c Common\Base\*.c Common\PsychVulkanCore\*.c kernel32.lib user32.lib winmm.lib gdi32.lib vulkan-1.lib dxgi.lib dxguid.lib
+        % Vulkan 1.1 installed under C:\VulkanSDK\1.1.108.0
+        mex -outdir ..\Projects\Windows\build -output PsychVulkanCore -DPTBMODULE_PsychVulkanCore -largeArrayDims -DMEX_DOUBLE_HANDLE -L"C:\VulkanSDK\1.1.108.0\Lib" -I"C:\VulkanSDK\1.1.108.0\Include" -ICommon\Base -IWindows\Base -ICommon\PsychVulkanCore Windows\Base\*.c Common\Base\*.c Common\PsychVulkanCore\*.c kernel32.lib user32.lib winmm.lib gdi32.lib vulkan-1.lib dxgi.lib dxguid.lib
         movefile(['..\Projects\Windows\build\PsychVulkanCore.' mexext], [PsychtoolboxRoot 'PsychBasic\MatlabWindowsFilesR2007a\']);
     end
 else
@@ -472,9 +472,9 @@ else
     if what == 15
         % Build PsychVulkanCore.mex for 64-bit Octave:
         % Needs the official Vulkan SDK for 64-Bit Windows for at least
-        % Vulkan 1.1 installed under C:\VulkanSDK\1.2.189.2
+        % Vulkan 1.1 installed under C:\VulkanSDK\1.1.108.0
         try
-            mexoctave --output ..\Projects\Windows\build\PsychVulkanCore.mex -DPTBMODULE_PsychVulkanCore -DPTBOCTAVE3MEX -LC:\VulkanSDK\1.2.189.2\Lib -IC:\VulkanSDK\1.2.189.2\Include -ICommon\Base -IWindows\Base -ICommon\PsychVulkanCore Windows\Base\*.c Common\Base\*.c Common\PsychVulkanCore\*.c kernel32.lib user32.lib winmm.lib gdi32.lib vulkan-1.lib dxgi.lib dxguid.lib
+            mexoctave --output ..\Projects\Windows\build\PsychVulkanCore.mex -DPTBMODULE_PsychVulkanCore -DPTBOCTAVE3MEX -LC:\VulkanSDK\1.1.108.0\Lib -IC:\VulkanSDK\1.1.108.0\Include -ICommon\Base -IWindows\Base -ICommon\PsychVulkanCore Windows\Base\*.c Common\Base\*.c Common\PsychVulkanCore\*.c kernel32.lib user32.lib winmm.lib gdi32.lib vulkan-1.lib dxgi.lib dxguid.lib
             movefile(['..\Projects\Windows\build\PsychVulkanCore.' mexext], target);
         catch
             disp(psychlasterror);
-- 
2.33.1

